/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MySchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1000456096678339123L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MySchema\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type inferred from '\\\"bharath kuamar\\\"'\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"Type inferred from '35'\"},{\"name\":\"salary\",\"type\":\"double\",\"doc\":\"Type inferred from '60000.8'\"},{\"name\":\"married\",\"type\":\"boolean\",\"doc\":\"Type inferred from 'true'\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MySchema> ENCODER =
      new BinaryMessageEncoder<MySchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MySchema> DECODER =
      new BinaryMessageDecoder<MySchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MySchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MySchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MySchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MySchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MySchema from a ByteBuffer. */
  public static MySchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type inferred from '"bharath kuamar"' */
   private java.lang.String name;
  /** Type inferred from '35' */
   private int age;
  /** Type inferred from '60000.8' */
   private double salary;
  /** Type inferred from 'true' */
   private boolean married;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MySchema() {}

  /**
   * All-args constructor.
   * @param name Type inferred from '"bharath kuamar"'
   * @param age Type inferred from '35'
   * @param salary Type inferred from '60000.8'
   * @param married Type inferred from 'true'
   */
  public MySchema(java.lang.String name, java.lang.Integer age, java.lang.Double salary, java.lang.Boolean married) {
    this.name = name;
    this.age = age;
    this.salary = salary;
    this.married = married;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return salary;
    case 3: return married;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: salary = (java.lang.Double)value$; break;
    case 3: married = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Type inferred from '"bharath kuamar"'
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'age' field.
   * @return Type inferred from '35'
   */
  public java.lang.Integer getAge() {
    return age;
  }


  /**
   * Gets the value of the 'salary' field.
   * @return Type inferred from '60000.8'
   */
  public java.lang.Double getSalary() {
    return salary;
  }


  /**
   * Gets the value of the 'married' field.
   * @return Type inferred from 'true'
   */
  public java.lang.Boolean getMarried() {
    return married;
  }


  /**
   * Creates a new MySchema RecordBuilder.
   * @return A new MySchema RecordBuilder
   */
  public static com.example.MySchema.Builder newBuilder() {
    return new com.example.MySchema.Builder();
  }

  /**
   * Creates a new MySchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MySchema RecordBuilder
   */
  public static com.example.MySchema.Builder newBuilder(com.example.MySchema.Builder other) {
    return new com.example.MySchema.Builder(other);
  }

  /**
   * Creates a new MySchema RecordBuilder by copying an existing MySchema instance.
   * @param other The existing instance to copy.
   * @return A new MySchema RecordBuilder
   */
  public static com.example.MySchema.Builder newBuilder(com.example.MySchema other) {
    return new com.example.MySchema.Builder(other);
  }

  /**
   * RecordBuilder for MySchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MySchema>
    implements org.apache.avro.data.RecordBuilder<MySchema> {

    /** Type inferred from '"bharath kuamar"' */
    private java.lang.String name;
    /** Type inferred from '35' */
    private int age;
    /** Type inferred from '60000.8' */
    private double salary;
    /** Type inferred from 'true' */
    private boolean married;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.MySchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.married)) {
        this.married = data().deepCopy(fields()[3].schema(), other.married);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MySchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.MySchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.married)) {
        this.married = data().deepCopy(fields()[3].schema(), other.married);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Type inferred from '"bharath kuamar"'
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Type inferred from '"bharath kuamar"'
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.example.MySchema.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Type inferred from '"bharath kuamar"'
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Type inferred from '"bharath kuamar"'
      * @return This builder.
      */
    public com.example.MySchema.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * Type inferred from '35'
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * Type inferred from '35'
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.example.MySchema.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * Type inferred from '35'
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * Type inferred from '35'
      * @return This builder.
      */
    public com.example.MySchema.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * Type inferred from '60000.8'
      * @return The value.
      */
    public java.lang.Double getSalary() {
      return salary;
    }

    /**
      * Sets the value of the 'salary' field.
      * Type inferred from '60000.8'
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.example.MySchema.Builder setSalary(double value) {
      validate(fields()[2], value);
      this.salary = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * Type inferred from '60000.8'
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salary' field.
      * Type inferred from '60000.8'
      * @return This builder.
      */
    public com.example.MySchema.Builder clearSalary() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'married' field.
      * Type inferred from 'true'
      * @return The value.
      */
    public java.lang.Boolean getMarried() {
      return married;
    }

    /**
      * Sets the value of the 'married' field.
      * Type inferred from 'true'
      * @param value The value of 'married'.
      * @return This builder.
      */
    public com.example.MySchema.Builder setMarried(boolean value) {
      validate(fields()[3], value);
      this.married = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'married' field has been set.
      * Type inferred from 'true'
      * @return True if the 'married' field has been set, false otherwise.
      */
    public boolean hasMarried() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'married' field.
      * Type inferred from 'true'
      * @return This builder.
      */
    public com.example.MySchema.Builder clearMarried() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MySchema build() {
      try {
        MySchema record = new MySchema();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.salary = fieldSetFlags()[2] ? this.salary : (java.lang.Double) defaultValue(fields()[2]);
        record.married = fieldSetFlags()[3] ? this.married : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MySchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<MySchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MySchema>
    READER$ = (org.apache.avro.io.DatumReader<MySchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
